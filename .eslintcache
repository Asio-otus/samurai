[{"D:\\Web\\social-network\\src\\index.tsx":"1","D:\\Web\\social-network\\src\\reportWebVitals.ts":"2","D:\\Web\\social-network\\src\\redux\\store.ts":"3","D:\\Web\\social-network\\src\\App.tsx":"4","D:\\Web\\social-network\\src\\redux\\profile-reducer.ts":"5","D:\\Web\\social-network\\src\\redux\\dialogs-reducer.ts":"6","D:\\Web\\social-network\\src\\redux\\users-reducer.ts":"7","D:\\Web\\social-network\\src\\components\\Header\\Header.tsx":"8","D:\\Web\\social-network\\src\\components\\Navbar\\Navbar.tsx":"9","D:\\Web\\social-network\\src\\components\\Profile\\Profile.tsx":"10","D:\\Web\\social-network\\src\\components\\Dialogs\\DialogsContainer.tsx":"11","D:\\Web\\social-network\\src\\components\\Users\\UsersContainer.tsx":"12","D:\\Web\\social-network\\src\\components\\Dialogs\\Dialogs.tsx":"13","D:\\Web\\social-network\\src\\components\\Users\\Users.tsx":"14","D:\\Web\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"15","D:\\Web\\social-network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"16","D:\\Web\\social-network\\src\\components\\common\\Preloader\\Preloader.tsx":"17","D:\\Web\\social-network\\src\\components\\Dialogs\\DialogsItem\\DialogsItem.tsx":"18","D:\\Web\\social-network\\src\\components\\Dialogs\\Messages\\Messages.tsx":"19","D:\\Web\\social-network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"20","D:\\Web\\social-network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"21","D:\\Web\\social-network\\src\\components\\Profile\\ProfileContainer.tsx":"22","D:\\Web\\social-network\\src\\redux\\auth-reducer.ts":"23","D:\\Web\\social-network\\src\\components\\Header\\HeaderContainer.tsx":"24","D:\\Web\\social-network\\src\\api\\api.ts":"25","D:\\Web\\social-network\\src\\components\\LoginPage\\LoginPage.tsx":"26","D:\\Web\\social-network\\src\\hoc\\withAuthRedirect.tsx":"27","D:\\Web\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileStatus\\ProfileStatus.tsx":"28","D:\\Web\\social-network\\src\\components\\LoginPage\\LoginForm\\LoginForm.tsx":"29"},{"size":705,"mtime":1614508431482,"results":"30","hashOfConfig":"31"},{"size":440,"mtime":1614508431486,"results":"32","hashOfConfig":"31"},{"size":1166,"mtime":1614534993160,"results":"33","hashOfConfig":"31"},{"size":1244,"mtime":1614508431461,"results":"34","hashOfConfig":"31"},{"size":3172,"mtime":1614527225993,"results":"35","hashOfConfig":"31"},{"size":1902,"mtime":1614508431484,"results":"36","hashOfConfig":"31"},{"size":4796,"mtime":1614508431485,"results":"37","hashOfConfig":"31"},{"size":405,"mtime":1614508431470,"results":"38","hashOfConfig":"31"},{"size":716,"mtime":1614508431472,"results":"39","hashOfConfig":"31"},{"size":691,"mtime":1614513049874,"results":"40","hashOfConfig":"31"},{"size":1076,"mtime":1614508431467,"results":"41","hashOfConfig":"31"},{"size":3580,"mtime":1614508431479,"results":"42","hashOfConfig":"31"},{"size":1760,"mtime":1614508431466,"results":"43","hashOfConfig":"31"},{"size":2039,"mtime":1614508431479,"results":"44","hashOfConfig":"31"},{"size":664,"mtime":1614513425783,"results":"45","hashOfConfig":"31"},{"size":772,"mtime":1614508431474,"results":"46","hashOfConfig":"31"},{"size":232,"mtime":1614508431481,"results":"47","hashOfConfig":"31"},{"size":462,"mtime":1614508431467,"results":"48","hashOfConfig":"31"},{"size":283,"mtime":1614508431469,"results":"49","hashOfConfig":"31"},{"size":1111,"mtime":1614508431473,"results":"50","hashOfConfig":"31"},{"size":573,"mtime":1614508431475,"results":"51","hashOfConfig":"31"},{"size":1419,"mtime":1614528258434,"results":"52","hashOfConfig":"31"},{"size":1172,"mtime":1614508431483,"results":"53","hashOfConfig":"31"},{"size":619,"mtime":1614508431470,"results":"54","hashOfConfig":"31"},{"size":1370,"mtime":1614527024656,"results":"55","hashOfConfig":"31"},{"size":444,"mtime":1614536492047,"results":"56","hashOfConfig":"31"},{"size":722,"mtime":1614508431481,"results":"57","hashOfConfig":"31"},{"size":1803,"mtime":1614529873954,"results":"58","hashOfConfig":"31"},{"size":1018,"mtime":1614535716921,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1aeb0ja",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"D:\\Web\\social-network\\src\\index.tsx",[],["124","125"],"D:\\Web\\social-network\\src\\reportWebVitals.ts",[],"D:\\Web\\social-network\\src\\redux\\store.ts",[],"D:\\Web\\social-network\\src\\App.tsx",[],"D:\\Web\\social-network\\src\\redux\\profile-reducer.ts",["126"],"import {DispatchType} from \"./store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    post: string\r\n    likes: number\r\n}\r\n\r\nexport type PostDataType = Array<PostType>\r\n\r\nexport type profileStateType = {\r\n    posts: PostDataType\r\n    newPostText: string\r\n    profile: {} | null\r\n    status: string\r\n}\r\n\r\nexport type ProfileActionsType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof updateNewPostText>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\nexport const SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nexport const SET_STATUS = 'SET_STATUS'\r\n\r\nlet initialState: profileStateType = {\r\n    posts: [\r\n        {id: 1, post: 'My first post', likes: 1},\r\n        {id: 2, post: 'My second post', likes: 2},\r\n        {id: 3, post: 'My third post', likes: 3},\r\n        {id: 4, post: 'My fourth post', likes: 4},\r\n        {id: 5, post: 'My fifth post', likes: 5}\r\n    ],\r\n    newPostText: '',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: profileStateType = initialState, action: ProfileActionsType) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: PostType = {\r\n                id: 6,\r\n                post: state.newPostText,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action creators\r\nexport const addPost = () => ({type: ADD_POST} as const)\r\n\r\nexport const updateNewPostText = (text: string) => ({\r\n    type: UPDATE_NEW_POST_TEXT, newText: text\r\n} as const)\r\n\r\nexport const setUserProfile = (profile: any) => ({\r\n    type: SET_USER_PROFILE, profile\r\n} as const)\r\n\r\nexport const setStatus = (status: string) => ( {\r\n    type: SET_STATUS, status\r\n} as const )\r\n\r\n// Thunk creators\r\nexport const getUserProfile = (userId: number) => (dispatch: DispatchType) => {\r\n    profileAPI.getProfile(userId)\r\n        .then(response => {\r\n            dispatch(setUserProfile(response.data))\r\n        })\r\n}\r\n\r\nexport const getProfileStatus = (userId: number) => (dispatch: DispatchType) => {\r\n    profileAPI.getStatus(userId)\r\n        .then(response => {\r\n            dispatch(setStatus(response.data))\r\n        })\r\n}\r\n\r\nexport const updateProfileStatus = (newStatus: string) => (dispatch: DispatchType) => {\r\n    profileAPI.updateStatus(newStatus)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(newStatus))\r\n            }\r\n        })\r\n}\r\n\r\n\r\n\r\n","D:\\Web\\social-network\\src\\redux\\dialogs-reducer.ts",[],"D:\\Web\\social-network\\src\\redux\\users-reducer.ts",[],"D:\\Web\\social-network\\src\\components\\Header\\Header.tsx",[],"D:\\Web\\social-network\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\Web\\social-network\\src\\components\\Profile\\Profile.tsx",["127","128"],"import React, {ReactNode} from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {profileStateType} from \"../../redux/profile-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    profile: profileStateType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","D:\\Web\\social-network\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"D:\\Web\\social-network\\src\\components\\Users\\UsersContainer.tsx",[],"D:\\Web\\social-network\\src\\components\\Dialogs\\Dialogs.tsx",["129"],"import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {dialogsStateType, DialogsType, MessagesType} from \"../../redux/dialogs-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    NewMessageChange: (body: string) => void\r\n    SendMessage: () => void\r\n    dialogsPage: dialogsStateType\r\n}\r\n\r\nexport const Dialogs = (props: PropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((dialogs: DialogsType)  => <DialogsItem id={dialogs.id} key={dialogs.id} name={dialogs.name}/>)\r\n    let messages = state.messages.map((messages: MessagesType) => <Messages id={messages.id} key={messages.id} message={messages.message}/>)\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    let onSendMessageClick = () => {\r\n        props.SendMessage()\r\n    }\r\n\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value\r\n        props.NewMessageChange(body)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsList}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.chat}>\r\n                <div>{messages}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody}\r\n                                   placeholder='Enter your message'\r\n                                   onChange={onNewMessageChange}/></div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Web\\social-network\\src\\components\\Users\\Users.tsx",["130","131"],"import userAvatarDefault from \"../../assets/images/avatar-default.png\";\r\nimport styles from \"./Users.module.scss\";\r\nimport React from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {usersAPI} from \"../../api/api\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    followingInProgress: []\r\n    onPageChanged: (pageNumber: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => <span onClick={(e) => {\r\n                    props.onPageChanged(p)\r\n                }}>{p}</span>)}\r\n            </div>\r\n            {props.users.map(u => <div key={u.id}>\r\n                <div>\r\n                    <NavLink to={'/profile/' + u.id}>\r\n                        <img src={u.photos.small != null ? u.photos.small : userAvatarDefault}\r\n                             className={styles.usersPhoto}\r\n                             alt='User image'/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                  onClick={() => {props.unfollow(u.id)}\r\n                                  }>Unfollow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                  onClick={() => {props.follow(u.id)}\r\n                                  }>Follow</button>}\r\n                </div>\r\n                <div>{u.name}</div>\r\n                <div>{u.status}</div>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}","D:\\Web\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",[],"D:\\Web\\social-network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["132"],"import React from 'react';\r\n\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {DispatchType, CombinedStateType} from \"../../../redux/store\";\r\nimport {addPost, updateNewPostText} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state: CombinedStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: DispatchType) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPost())\r\n        },\r\n        updateNewPostText: (text: string) => {\r\n            dispatch(updateNewPostText(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","D:\\Web\\social-network\\src\\components\\common\\Preloader\\Preloader.tsx",[],"D:\\Web\\social-network\\src\\components\\Dialogs\\DialogsItem\\DialogsItem.tsx",[],"D:\\Web\\social-network\\src\\components\\Dialogs\\Messages\\Messages.tsx",[],"D:\\Web\\social-network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"D:\\Web\\social-network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\Web\\social-network\\src\\components\\Profile\\ProfileContainer.tsx",[],"D:\\Web\\social-network\\src\\redux\\auth-reducer.ts",[],"D:\\Web\\social-network\\src\\components\\Header\\HeaderContainer.tsx",[],"D:\\Web\\social-network\\src\\api\\api.ts",[],"D:\\Web\\social-network\\src\\components\\LoginPage\\LoginPage.tsx",[],"D:\\Web\\social-network\\src\\hoc\\withAuthRedirect.tsx",[],"D:\\Web\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileStatus\\ProfileStatus.tsx",[],"D:\\Web\\social-network\\src\\components\\LoginPage\\LoginForm\\LoginForm.tsx",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":21,"nodeType":"139","messageId":"140","endLine":2,"endColumn":29},{"ruleId":"137","severity":1,"message":"141","line":1,"column":16,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"142","line":5,"column":9,"nodeType":"139","messageId":"140","endLine":5,"endColumn":17},{"ruleId":"137","severity":1,"message":"142","line":6,"column":10,"nodeType":"139","messageId":"140","endLine":6,"endColumn":18},{"ruleId":"137","severity":1,"message":"138","line":6,"column":9,"nodeType":"139","messageId":"140","endLine":6,"endColumn":17},{"ruleId":"143","severity":1,"message":"144","line":38,"column":25,"nodeType":"145","endLine":40,"endColumn":48},{"ruleId":"137","severity":1,"message":"146","line":1,"column":8,"nodeType":"139","messageId":"140","endLine":1,"endColumn":13},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"@typescript-eslint/no-unused-vars","'usersAPI' is defined but never used.","Identifier","unusedVar","'ReactNode' is defined but never used.","'Redirect' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]